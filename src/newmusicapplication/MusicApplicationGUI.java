/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newmusicapplication;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import java.util.Spliterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.concurrent.Task;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.ListSelectionModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author George
 */
public class MusicApplicationGUI extends javax.swing.JFrame {

    DefaultTableModel tbModel;
    DefaultTableModel tracksModel;
    DefaultTableModel playlistModel;
    AlbumCollection ac = new AlbumCollection();
    Task task;
    MP3Player mp3 = new MP3Player();
    Album album;
    boolean songFinished = false;
    JOptionPane errorMessage = new JOptionPane();

    /**
     * Creates new form MusicApplicationGUI
     */
    public MusicApplicationGUI() {
        initComponents();
//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        int width = (int) screenSize.getWidth();
//        int height = (int) screenSize.getHeight();
//        jPanel1.setSize(width, height);
//        jPanel1.setMaximumSize(screenSize);
        tbModel = (DefaultTableModel) albumsTable.getModel();
        albumsTable.setDefaultEditor(Object.class, null);

        tracksModel = (DefaultTableModel) selectedAlbumSongs.getModel();
        selectedAlbumSongs.setDefaultEditor(Object.class, null);
        selectedAlbumSongs.getColumnModel().getColumn(0).setPreferredWidth(300);
        selectedAlbumSongs.getColumnModel().getColumn(1).setPreferredWidth(100);
        selectedAlbumSongs.getColumnModel().getColumn(2).setPreferredWidth(300);

        playlistTable.getColumnModel().getColumn(0).setPreferredWidth(300);
        playlistTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        playlistTable.getColumnModel().getColumn(2).setPreferredWidth(300);

        playlistModel = (DefaultTableModel) playlistTable.getModel();
        playlistTable.setRowSelectionAllowed(true);
        playlistTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        albumsTable = new javax.swing.JTable();
        LoadAlbumCollection = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedAlbumSongs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        albumImageLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        playlistTable = new javax.swing.JTable();
        AddSongToPlaylist = new javax.swing.JButton();
        removeSongFromPlaylist = new javax.swing.JButton();
        playPlaylist = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        Pause = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButtonPreviousTrack = new javax.swing.JButton();
        jButtonSkipTrack = new javax.swing.JButton();
        currentlyPlaying = new javax.swing.JLabel();
        musicLengthBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        importMP3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MP3 Application");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(1600, 650));
        setPreferredSize(new java.awt.Dimension(1600, 650));

        albumsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Album"
            }
        ));
        albumsTable.setMaximumSize(new java.awt.Dimension(300, 0));
        albumsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                albumsTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(albumsTable);

        LoadAlbumCollection.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LoadAlbumCollection.setText("Load Album Collection");
        LoadAlbumCollection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LoadAlbumCollectionMousePressed(evt);
            }
        });

        selectedAlbumSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Duration", "Album"
            }
        ));
        selectedAlbumSongs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(selectedAlbumSongs);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        albumImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        albumImageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        albumImageLabel.setMaximumSize(new java.awt.Dimension(300, 300));
        albumImageLabel.setMinimumSize(new java.awt.Dimension(300, 300));
        albumImageLabel.setOpaque(true);
        albumImageLabel.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(albumImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(albumImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        playlistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Duration", "Album"
            }
        ));
        playlistTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        playlistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playlistTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(playlistTable);

        AddSongToPlaylist.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AddSongToPlaylist.setText("Add to Playlist");
        AddSongToPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AddSongToPlaylistMousePressed(evt);
            }
        });

        removeSongFromPlaylist.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeSongFromPlaylist.setText("Remove from Playlist");
        removeSongFromPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeSongFromPlaylistMousePressed(evt);
            }
        });

        playPlaylist.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playPlaylist.setText("Play Playlist");
        playPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playPlaylistMousePressed(evt);
            }
        });
        playPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPlaylistActionPerformed(evt);
            }
        });

        playButton.setText("Play");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }
        });

        Pause.setText("Pause");
        Pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PauseMousePressed(evt);
            }
        });

        jButton6.setText("Stop");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton6MouseReleased(evt);
            }
        });

        jButtonPreviousTrack.setText("Previous");
        jButtonPreviousTrack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPreviousTrackMouseClicked(evt);
            }
        });

        jButtonSkipTrack.setText("Next");
        jButtonSkipTrack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSkipTrackMouseClicked(evt);
            }
        });

        currentlyPlaying.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 18)); // NOI18N
        currentlyPlaying.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentlyPlaying.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        musicLengthBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        importMP3.setText("File");

        jMenuItem1.setText("Import MP3 Files");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        importMP3.add(jMenuItem1);

        jMenuBar1.add(importMP3);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadAlbumCollection, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddSongToPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(removeSongFromPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Pause)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonPreviousTrack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSkipTrack))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(currentlyPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(musicLengthBar, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentlyPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playButton)
                            .addComponent(Pause)
                            .addComponent(jButton6)
                            .addComponent(jButtonPreviousTrack)
                            .addComponent(jButtonSkipTrack))
                        .addGap(18, 18, 18)
                        .addComponent(musicLengthBar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(removeSongFromPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(LoadAlbumCollection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddSongToPlaylist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
        MouseListener mL = new MouseAdapter() {
        };
        if (evt.getClickCount() >= 0);
        {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex, 0) + ".mp3";

                playlistTable.getValueAt(rowIndex, 0);
                System.out.println(playlistTable.getValueAt(rowIndex, 0));
                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();

                //              String[] displayMp3Name = mp3filename.split(".mp3");
                //               String displayName = displayMp3Name[0];
                String displayName = (String) playlistTable.getModel().getValueAt(rowIndex, 0);
                //System.out.println(mp3File);
                if (mp3.bis != null) {
                    mp3.close();
                }

                if (mp3.bis == null) {
                    mp3.play(mp3File);
                    currentlyPlaying.setText("Now Playing: " + displayName);
                } else {
                    try {
                        if (mp3.pauseLocation > 0) {
                            mp3.resume();
                            currentlyPlaying.setText("Resumed Playing: " + displayName);
                        }

                    } catch (Exception e) {
                        Logger.getLogger(MusicApplicationGUI.class.getName()).log(Level.SEVERE, null, e);

                    }

                }
                String songDuration = (String) playlistTable.getModel().getValueAt(rowIndex, 1);
                
                Font myFont = new Font("Serif", Font.BOLD, 18);
                
                musicLengthBar.setFont(myFont);
                musicLengthBar.setStringPainted(true);
                //need to create a method to track time of song and update the string as song Progresses....
                musicLengthBar.setString("0:00:00 " + " : " + songDuration);
                
                
                playlistTable.addMouseListener(mL);
                playlistTable.setModel(playlistModel);

            }
        }
    }//GEN-LAST:event_playButtonMouseClicked

    public void trackMusicLength(){
    
    }
    
    private void jButtonSkipTrackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSkipTrackMouseClicked

        try {

            int rowIndex = playlistTable.getSelectedRow();
            //int rowCheck = playlistTable.getRowCount();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex + 1, 0) + ".mp3";
                int previousSong = rowIndex;

                playlistTable.setRowSelectionInterval(rowIndex + 1, 0);
                playlistTable.getSelectionModel().removeSelectionInterval(previousSong, 0);
                System.out.println(mp3filename);

                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();
                System.out.println(mp3File);
                mp3.close();
                mp3.play(mp3File);

                String mp3DisplayName = (String) playlistTable.getModel().getValueAt(rowIndex + 1, 0);

                currentlyPlaying.setText("Now Playing: " + mp3DisplayName);
                String albumName = (String) playlistTable.getModel().getValueAt(rowIndex + 1, 2);
                String albumImage;
                String imageInformation = ac.getAlbumByHeader(albumName).getAlbumImageName();

                File albumCover = new File(currentFolder + "/albumImages/" + imageInformation + ".jpg");

                albumImage = albumCover.getAbsolutePath();

                ImageIcon scaledAlbumCover = new ImageIcon(new ImageIcon(albumImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

                File defaultCover = new File("albumImages/defaultAlbumCover.jpg");
                String defaultImage = defaultCover.getAbsolutePath();
                ImageIcon iconDefaultCover = new ImageIcon(new ImageIcon(defaultImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));
                Dimension imageSize = new Dimension(300, 300);
                albumImageLabel.setSize(imageSize);
                if (scaledAlbumCover.getIconHeight() != -1) {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(scaledAlbumCover);
                } else {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(iconDefaultCover);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButtonSkipTrackMouseClicked

    private void jButtonPreviousTrackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonPreviousTrackMouseClicked
        try {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex - 1, 0) + ".mp3";

                int previousSong = rowIndex;

                playlistTable.getSelectionModel().removeSelectionInterval(previousSong, 0);
                playlistTable.setRowSelectionInterval(rowIndex - 1, 0);

                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();
                System.out.println(mp3File);
                mp3.close();
                mp3.play(mp3File);

                String mp3DisplayName = (String) playlistTable.getModel().getValueAt(rowIndex - 1, 0);
                currentlyPlaying.setText("Now Playing: " + mp3DisplayName);

                String albumName = (String) playlistTable.getModel().getValueAt(rowIndex - 1, 2);

                String albumImage;
                String imageInformation = ac.getAlbumByHeader(albumName).getAlbumImageName();

                File albumCover = new File(currentFolder + "/albumImages/" + imageInformation + ".jpg");

                albumImage = albumCover.getAbsolutePath();

                ImageIcon scaledAlbumCover = new ImageIcon(new ImageIcon(albumImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

                File defaultCover = new File("albumImages/defaultAlbumCover.jpg");
                String defaultImage = defaultCover.getAbsolutePath();
                ImageIcon iconDefaultCover = new ImageIcon(new ImageIcon(defaultImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));
                Dimension imageSize = new Dimension(300, 300);
                albumImageLabel.setSize(imageSize);
                if (scaledAlbumCover.getIconHeight() != -1) {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(scaledAlbumCover);
                } else {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(iconDefaultCover);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButtonPreviousTrackMouseClicked

    private void setalbumImages() {
        if (tracksModel.getRowCount() >= 0) {
            tracksModel.setRowCount(0);
        }

        int rowIndex = albumsTable.getSelectedRow();
        int colIndex = albumsTable.getSelectedColumn();
        if (rowIndex >= 0) {
            String selectedAlbum = (String) albumsTable.getModel().getValueAt(rowIndex, colIndex);

            List<String> trackList = ac.getAlbumByHeader(selectedAlbum).getTrackList();

            String albumImage;
            String imageInformation = ac.getAlbumByHeader(selectedAlbum).getAlbumImageName();

            String currentFolder = System.getProperty("user.dir");
            File albumCover = new File(currentFolder + "/albumImages/" + imageInformation + ".jpg");

            albumImage = albumCover.getAbsolutePath();

            ImageIcon scaledAlbumCover = new ImageIcon(new ImageIcon(albumImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

            File defaultCover = new File("albumImages/defaultAlbumCover.jpg");
            String defaultImage = defaultCover.getAbsolutePath();
            ImageIcon iconDefaultCover = new ImageIcon(new ImageIcon(defaultImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

            if (scaledAlbumCover.getIconHeight() != -1) {
                albumImageLabel.setIcon(scaledAlbumCover);
            } else {
                albumImageLabel.setIcon(iconDefaultCover);
            }
        }
    }

    private void albumsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_albumsTableMousePressed

        MouseListener mL = new MouseAdapter() {
        };

        if (evt.getClickCount() >= 0);
        {
            if (tracksModel.getRowCount() >= 0) {
                tracksModel.setRowCount(0);

            }

            int rowIndex = albumsTable.getSelectedRow();
            int colIndex = albumsTable.getSelectedColumn();
            if (rowIndex >= 0) {

                String selectedAlbum = (String) albumsTable.getModel().getValueAt(rowIndex, colIndex);

                List<String> trackList = ac.getAlbumByHeader(selectedAlbum).getTrackList();

                String albumImage;
                String imageInformation = ac.getAlbumByHeader(selectedAlbum).getAlbumImageName();

                String currentFolder = System.getProperty("user.dir");
                File albumCover = new File(currentFolder + "/albumImages/" + imageInformation + ".jpg");

                albumImage = albumCover.getAbsolutePath();

                ImageIcon scaledAlbumCover = new ImageIcon(new ImageIcon(albumImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

                File defaultCover = new File("albumImages/defaultAlbumCover.jpg");
                String defaultImage = defaultCover.getAbsolutePath();
                ImageIcon iconDefaultCover = new ImageIcon(new ImageIcon(defaultImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));
                Dimension imageSize = new Dimension(300, 300);
                albumImageLabel.setSize(imageSize);
                if (scaledAlbumCover.getIconHeight() != -1) {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(scaledAlbumCover);
                } else {
                    albumImageLabel.setSize(imageSize);
                    albumImageLabel.setIcon(iconDefaultCover);
                }

                //setalbumImages();
                //String selectedAlbum = (String) albumsTable.getModel().getValueAt(rowIndex, colIndex);
                // List<String> trackList = ac.getAlbumByHeader(selectedAlbum).getTrackList();
                //this loop displays the tracks in the associated table for each selected album
                for (int i = 0; i < trackList.size(); i++) {

                    String tracksToSplit = trackList.get(i);
                    String[] trackInformation = tracksToSplit.split("-");
                    String songDuration = trackInformation[0];
                    String songName = trackInformation[1];

                    tracksModel.insertRow(tracksModel.getRowCount(), new Object[]{songName, songDuration, selectedAlbum});

                    System.out.println(songDuration);
                }

            }
        }

        selectedAlbumSongs.addMouseListener(mL);
        selectedAlbumSongs.setModel(tracksModel);

    }//GEN-LAST:event_albumsTableMousePressed

    private void playlistTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlistTableMousePressed

        int rowIndex = playlistTable.getSelectedRow();
        int colIndex = playlistTable.getSelectedColumn();

        String songName = (String) playlistTable.getModel().getValueAt(rowIndex, 0);
        if (rowIndex >= 0) {
            currentlyPlaying.setText("Selected: " + songName);
        }

        String albumName = (String) playlistTable.getModel().getValueAt(rowIndex, 2);

        String currentFolder = System.getProperty("user.dir");
        String albumImage;
        String imageInformation = ac.getAlbumByHeader(albumName).getAlbumImageName();

        File albumCover = new File(currentFolder + "/albumImages/" + imageInformation + ".jpg");

        albumImage = albumCover.getAbsolutePath();

        ImageIcon scaledAlbumCover = new ImageIcon(new ImageIcon(albumImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));

        File defaultCover = new File("albumImages/defaultAlbumCover.jpg");
        String defaultImage = defaultCover.getAbsolutePath();
        ImageIcon iconDefaultCover = new ImageIcon(new ImageIcon(defaultImage).getImage().getScaledInstance(albumImageLabel.getWidth(), albumImageLabel.getHeight(), Image.SCALE_SMOOTH));
        Dimension imageSize = new Dimension(300, 300);
        albumImageLabel.setSize(imageSize);
        if (scaledAlbumCover.getIconHeight() != -1) {
            albumImageLabel.setSize(imageSize);
            albumImageLabel.setIcon(scaledAlbumCover);
        } else {
            albumImageLabel.setSize(imageSize);
            albumImageLabel.setIcon(iconDefaultCover);
        }


    }//GEN-LAST:event_playlistTableMousePressed

    private void AddSongToPlaylistMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddSongToPlaylistMousePressed
        MouseListener mL = new MouseAdapter() {
        };

        if (evt.getClickCount() >= 0);
        {

            int rowIndex = selectedAlbumSongs.getSelectedRow();
            int colIndex = selectedAlbumSongs.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String selectedSong = (String) selectedAlbumSongs.getModel().getValueAt(rowIndex, 0);
                String selectedSongDuration = (String) selectedAlbumSongs.getModel().getValueAt(rowIndex, 1);
                String songAlbum = (String) selectedAlbumSongs.getModel().getValueAt(rowIndex, 2);

                playlistModel.insertRow(playlistModel.getRowCount(), new Object[]{selectedSong, selectedSongDuration, songAlbum});

                playlistTable.addMouseListener(mL);

                playlistTable.setModel(playlistModel);
            }
        }
    }//GEN-LAST:event_AddSongToPlaylistMousePressed

    private void removeSongFromPlaylistMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSongFromPlaylistMousePressed
        MouseListener mL = new MouseAdapter() {
        };

        playlistTable.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent tme) {
                if (playlistTable.getRowCount() == 0) {
                    currentlyPlaying.setText(" ");
                }
            }

        });

        if (evt.getClickCount() >= 0);
        {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                playlistModel.removeRow(rowIndex);
                currentlyPlaying.setText(" ");
                playlistTable.addMouseListener(mL);

                playlistTable.setModel(playlistModel);
            }
        }
    }//GEN-LAST:event_removeSongFromPlaylistMousePressed

    private void LoadAlbumCollectionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadAlbumCollectionMousePressed

        String fileName = null;// = "albums.txt";

        try {
            //this is a file chooser for albumCollection
            JFileChooser openFC = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files(.txt)", "txt", "text");
            openFC.setFileFilter(filter);
            Component c1 = null;
            openFC.showOpenDialog(c1);

            File albumFile = openFC.getSelectedFile();
            fileName = albumFile.getAbsolutePath();

            // create method in album collection that returns List<String> containing each albums header
            // for each item in the list, add it to the list model
            //this displays albums by header and adds elements until there are no more albums
            if (albumsTable.getRowCount() == 0) {

                ac.readFile(fileName);
                for (String albumList : ac.getAlbumHeaderList()) {
                    //tabelModel.addElement(albumList);
                    tbModel.insertRow(tbModel.getRowCount(), new Object[]{albumList});

                }
            } else if (albumsTable.getRowCount() >= 1) {
                {
                    tbModel.setRowCount(0);
                    System.out.println(tbModel.getRowCount());
                }
                ac.readFile(fileName);
                if (albumsTable.getRowCount() == 0) {
                    for (String albumList : ac.getAlbumHeaderList()) {
                        //tabelModel.addElement(albumList);
                        tbModel.insertRow(tbModel.getRowCount(), new Object[]{albumList});

                    }
                }

            }
        } catch (Exception e) {
            System.out.println("Error with Filename " + fileName + e);
        } // TODO add your handling code here:
    }//GEN-LAST:event_LoadAlbumCollectionMousePressed

    private void playPlaylistMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playPlaylistMousePressed

//finds and returns all elements rows/columns of the Playlist table
        if (playlistTable.getRowCount() == 0) {
            System.out.println("There are no Songs in the Playlist");

        } else if (playlistTable.getRowCount() != 0) {
            for (int row = 0; row < playlistModel.getRowCount(); row++) {
                // for (int column = 0; column < playlistModel.getColumnCount(); column++) {
                System.out.println(playlistModel.getValueAt(row, 0));
            }
        }
        int selectedRow = playlistTable.getSelectedRow();
        String mp3filename = (String) playlistModel.getValueAt(selectedRow, 0) + ".mp3";
        mp3filename = mp3filename.replaceAll("\\s+", "");
        String currentFolder = System.getProperty("user.dir");

        File songToPlay = new File(currentFolder + "/music/" + mp3filename);
        String mp3File = songToPlay.getAbsolutePath();
        mp3.close();
        mp3.play(mp3File);
        try {
            System.out.println(mp3.fis.read());
        } catch (IOException ex) {
            Logger.getLogger(MusicApplicationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (mp3.fis.read() <= 0) {
                mp3.close();
                mp3filename = (String) playlistModel.getValueAt(selectedRow + 1, 0);
                File nextSongToPlay = new File(currentFolder + "/music/" + mp3filename);
                mp3File = nextSongToPlay.getAbsolutePath();
                mp3.play(mp3File);

            }

        } catch (IOException ex) {
            Logger.getLogger(MusicApplicationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_playPlaylistMousePressed

    private void PauseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PauseMousePressed

        int rowIndex = playlistTable.getSelectedRow();
        String displayName = (String) playlistTable.getModel().getValueAt(rowIndex, 0);

        try {
            mp3.pause();
            currentlyPlaying.setText("Paused Playing: " + displayName);

        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "There is no MP3 currently playing, please select an MP3 file first ", "Message - No Music File Selected", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_PauseMousePressed

    private void jButton6MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseReleased
        try {
            mp3.close();
            //jTextAreaCurrentlyPlaying.setText("Stopped Playing ");

        } catch (Exception e) {
            System.out.println(e);

            errorMessage.setVisible(true);
        }


    }//GEN-LAST:event_jButton6MouseReleased

    private void playPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPlaylistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playPlaylistActionPerformed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        String fileName;

        try {
            //this is a file chooser for albumCollection
            JFileChooser openFC = new JFileChooser();
            openFC.setMultiSelectionEnabled(true);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("MP3 Files(.mp3)", "mp3", "mp3");
            openFC.setFileFilter(filter);
            Component c1 = null;
            openFC.showOpenDialog(c1);

            File mp3File = openFC.getSelectedFile();
            File[] files = openFC.getSelectedFiles();

//fileName = mp3File.getAbsolutePath();
            fileName = mp3File.getName();

            String currentFolder = System.getProperty("user.dir");
            //System.out.println(fileName);
            File savedFile = new File(currentFolder + "/music/" + fileName);
            System.out.println(savedFile);

            InputStream is = new FileInputStream(mp3File);
            OutputStream os = new FileOutputStream(savedFile);

            byte[] buffer = new byte[4096];
            int readingFile;
            while ((readingFile = is.read(buffer)) > 0) {
                os.write(buffer, 0, readingFile);
            }
            os.close();

        } catch (Exception e) {

        }
    }//GEN-LAST:event_jMenuItem1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicApplicationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSongToPlaylist;
    private javax.swing.JButton LoadAlbumCollection;
    private javax.swing.JButton Pause;
    private javax.swing.JLabel albumImageLabel;
    private javax.swing.JTable albumsTable;
    private javax.swing.JLabel currentlyPlaying;
    private javax.swing.JMenu importMP3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonPreviousTrack;
    private javax.swing.JButton jButtonSkipTrack;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JProgressBar musicLengthBar;
    private javax.swing.JButton playButton;
    private javax.swing.JButton playPlaylist;
    private javax.swing.JTable playlistTable;
    private javax.swing.JButton removeSongFromPlaylist;
    private javax.swing.JTable selectedAlbumSongs;
    // End of variables declaration//GEN-END:variables
}
