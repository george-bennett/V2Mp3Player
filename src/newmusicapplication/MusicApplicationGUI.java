/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newmusicapplication;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileFilter;
import java.util.Arrays;
import java.util.List;
import java.util.Spliterator;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author George
 */
public class MusicApplicationGUI extends javax.swing.JFrame {

    DefaultTableModel tbModel;
    DefaultTableModel tracksModel;
    DefaultTableModel playlistModel;
    AlbumCollection ac = new AlbumCollection();
    MP3Player mp3 = new MP3Player();

    /**
     * Creates new form MusicApplicationGUI
     */
    public MusicApplicationGUI() {
        initComponents();
        tbModel = (DefaultTableModel) albumsTable.getModel();
        albumsTable.setDefaultEditor(Object.class, null);

        tracksModel = (DefaultTableModel) selectedAlbumSongs.getModel();
        selectedAlbumSongs.setDefaultEditor(Object.class, null);
        selectedAlbumSongs.getColumnModel().getColumn(0).setPreferredWidth(350);

        
        playlistModel = (DefaultTableModel) playlistTable.getModel();
        playlistTable.setRowSelectionAllowed(true);
        playlistTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        albumsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedAlbumSongs = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        playlistTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        removeSongFromPlaylist = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButtonPreviousTrack = new javax.swing.JButton();
        jButtonSkipTrack = new javax.swing.JButton();
        currentlyPlaying = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        albumsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Album"
            }
        ));
        albumsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                albumsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(albumsTable);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Load Album Collection");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        selectedAlbumSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Duration"
            }
        ));
        jScrollPane2.setViewportView(selectedAlbumSongs);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        playlistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Song", "Duration"
            }
        ));
        playlistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playlistTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(playlistTable);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Add to Playlist");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        removeSongFromPlaylist.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeSongFromPlaylist.setText("Remove from Playlist");
        removeSongFromPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeSongFromPlaylistMouseClicked(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Play Playlist");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        playButton.setText("Play");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }
        });

        jButton5.setText("Pause");

        jButton6.setText("Stop");

        jButtonPreviousTrack.setText("Previous");
        jButtonPreviousTrack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPreviousTrackMouseClicked(evt);
            }
        });

        jButtonSkipTrack.setText("Next");
        jButtonSkipTrack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSkipTrackMouseClicked(evt);
            }
        });

        currentlyPlaying.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 18)); // NOI18N
        currentlyPlaying.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentlyPlaying.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(removeSongFromPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonPreviousTrack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSkipTrack))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(currentlyPlaying, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(currentlyPlaying, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(playButton)
                                    .addComponent(jButton5)
                                    .addComponent(jButton6)
                                    .addComponent(jButtonPreviousTrack)
                                    .addComponent(jButtonSkipTrack))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeSongFromPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(327, 327, 327))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(326, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        String fileName = null;// = "albums.txt";

        try {
            //this is a file chooser for albumCollection
            JFileChooser openFC = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files(.txt)", "txt", "text");
            openFC.setFileFilter(filter);
            Component c1 = null;
            openFC.showOpenDialog(c1);

            File albumFile = openFC.getSelectedFile();
            fileName = albumFile.getAbsolutePath();

            // create method in album collection that returns List<String> containing each albums header
            // for each item in the list, add it to the list model
            //this displays albums by header and adds elements until there are no more albums
            if (albumsTable.getRowCount() == 0) {

                ac.readFile(fileName);
                for (String albumList : ac.getAlbumHeaderList()) {
                    //tabelModel.addElement(albumList);
                    tbModel.insertRow(tbModel.getRowCount(), new Object[]{albumList});

                }
            } else if (albumsTable.getRowCount() >= 1) {
                {
                    tbModel.setRowCount(0);
                    System.out.println(tbModel.getRowCount());
                }
                ac.readFile(fileName);
                if (albumsTable.getRowCount() == 0) {
                    for (String albumList : ac.getAlbumHeaderList()) {
                        //tabelModel.addElement(albumList);
                        tbModel.insertRow(tbModel.getRowCount(), new Object[]{albumList});

                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error with Filename " + fileName + e);
        }


    }//GEN-LAST:event_jButton1MouseClicked

    private void albumsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_albumsTableMouseClicked

        MouseListener mL = new MouseAdapter() {
        };

        if (evt.getClickCount() >= 0);
        {
            if (tracksModel.getRowCount() >= 0) {
                tracksModel.setRowCount(0);

            }

            int rowIndex = albumsTable.getSelectedRow();
            int colIndex = albumsTable.getSelectedColumn();
            if (rowIndex >= 0) {
                String selectedAlbum = (String) albumsTable.getModel().getValueAt(rowIndex, colIndex);

                List<String> trackList = ac.getAlbumByHeader(selectedAlbum).getTrackList();

                for (int i = 0; i < trackList.size(); i++) {

                    String tracksToSplit = trackList.get(i);
                    String[] trackInformation = tracksToSplit.split("-");
                    String songDuration = trackInformation[0];
                    String songName = trackInformation[1];

                    tracksModel.insertRow(tracksModel.getRowCount(), new Object[]{songName, songDuration});

                    System.out.println(songDuration);
                }
            }
            selectedAlbumSongs.addMouseListener(mL);
            selectedAlbumSongs.setModel(tracksModel);
        }
    }//GEN-LAST:event_albumsTableMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        MouseListener mL = new MouseAdapter() {
        };

        if (evt.getClickCount() >= 0);
        {

            int rowIndex = selectedAlbumSongs.getSelectedRow();
            int colIndex = selectedAlbumSongs.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String selectedSong = (String) selectedAlbumSongs.getModel().getValueAt(rowIndex, 0);
                String selectedSongDuration = (String) selectedAlbumSongs.getModel().getValueAt(rowIndex, 1);
                playlistModel.insertRow(playlistModel.getRowCount(), new Object[]{selectedSong, selectedSongDuration});

                playlistTable.addMouseListener(mL);

                playlistTable.setModel(playlistModel);
            }
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void removeSongFromPlaylistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSongFromPlaylistMouseClicked
        MouseListener mL = new MouseAdapter() {
        };

        if (evt.getClickCount() >= 0);
        {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                playlistModel.removeRow(rowIndex);

                playlistTable.addMouseListener(mL);

                playlistTable.setModel(playlistModel);
            }
        }
    }//GEN-LAST:event_removeSongFromPlaylistMouseClicked

    private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
        MouseListener mL = new MouseAdapter() {
        };
        if (evt.getClickCount() >= 0);
        {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex, 0) + ".mp3";

                playlistTable.getValueAt(rowIndex, 0);
                System.out.println(playlistTable.getValueAt(rowIndex, 0));
                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();

                String[] displayMp3Name = mp3filename.split(".mp3");
                String displayName = displayMp3Name[0];

                //System.out.println(mp3File);
                mp3.close();
                mp3.play(mp3File);
                currentlyPlaying.setText("Now Playing: " + displayName);
                playlistTable.addMouseListener(mL);
                playlistTable.setModel(playlistModel);

            }
        }
    }//GEN-LAST:event_playButtonMouseClicked

    private void jButtonSkipTrackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSkipTrackMouseClicked

        try {

            int rowIndex = playlistTable.getSelectedRow();
            //int rowCheck = playlistTable.getRowCount();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex + 1, 0) + ".mp3";
                int previousSong = rowIndex;

                playlistTable.setRowSelectionInterval(rowIndex + 1, 0);
                playlistTable.getSelectionModel().removeSelectionInterval(previousSong, 0);
                System.out.println(mp3filename);

                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();
                System.out.println(mp3File);
                mp3.close();
                mp3.play(mp3File);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButtonSkipTrackMouseClicked

    private void jButtonPreviousTrackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonPreviousTrackMouseClicked
        try {

            int rowIndex = playlistTable.getSelectedRow();
            int colIndex = playlistTable.getSelectedColumn();
            if (rowIndex >= 0 && colIndex >= 0) {

                String mp3filename = playlistTable.getModel().getValueAt(rowIndex - 1, 0) + ".mp3";

                int previousSong = rowIndex;

                playlistTable.getSelectionModel().removeSelectionInterval(previousSong, 0);
                playlistTable.setRowSelectionInterval(rowIndex - 1, 0);

                mp3filename = mp3filename.replaceAll("\\s+", "");

                String currentFolder = System.getProperty("user.dir");

                File songToPlay = new File(currentFolder + "/music/" + mp3filename);
                String mp3File = songToPlay.getAbsolutePath();
                System.out.println(mp3File);
                mp3.close();
                mp3.play(mp3File);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButtonPreviousTrackMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked

        //finds and returns all elements rows/columns of the Playlist table
        if (playlistTable.getRowCount() == 0) {
            System.out.println("There are no Songs in the Playlist");

        } else if (playlistTable.getRowCount() != 0) {
            for (int row = 0; row < playlistModel.getRowCount(); row++) {
                // for (int column = 0; column < playlistModel.getColumnCount(); column++) {
                System.out.println("This playlist is made of the following songs \n" + playlistModel.getValueAt(row, 0));
            }
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void playlistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlistTableMouseClicked
        int index = playlistTable.getSelectedRow();
        String songName = (String) playlistTable.getModel().getValueAt(index, 0);
        if (index >= 0) 
        {
            currentlyPlaying.setText("Selected: " + songName);
        }


    }//GEN-LAST:event_playlistTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicApplicationGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicApplicationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable albumsTable;
    private javax.swing.JLabel currentlyPlaying;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonPreviousTrack;
    private javax.swing.JButton jButtonSkipTrack;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton playButton;
    private javax.swing.JTable playlistTable;
    private javax.swing.JButton removeSongFromPlaylist;
    private javax.swing.JTable selectedAlbumSongs;
    // End of variables declaration//GEN-END:variables
}
